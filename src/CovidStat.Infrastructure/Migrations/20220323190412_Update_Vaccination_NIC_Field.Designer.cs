// <auto-generated />
using System;
using CovidStat.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CovidStat.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220323190412_Update_Vaccination_NIC_Field")]
    partial class Update_Vaccination_NIC_Field
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CovidStat.Domain.Entities.ChronicDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.Hero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("HeroType")
                        .HasColumnType("integer");

                    b.Property<string>("Individuality")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.SideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("VaccinationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VaccinationId2")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VaccinationId");

                    b.HasIndex("VaccinationId2");

                    b.ToTable("SideEffects");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.Travel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfArrival")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfDepature")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Travels");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("MartialStatus")
                        .HasColumnType("text");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NIC")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.Vaccination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfVaccination")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Vaccine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.ChronicDisease", b =>
                {
                    b.HasOne("CovidStat.Domain.Entities.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("CovidStat.Domain.Entities.UserProfile", null)
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.SideEffect", b =>
                {
                    b.HasOne("CovidStat.Domain.Entities.Vaccination", "Vaccination")
                        .WithMany()
                        .HasForeignKey("VaccinationId");

                    b.HasOne("CovidStat.Domain.Entities.Vaccination", null)
                        .WithMany("SideEffects")
                        .HasForeignKey("VaccinationId2")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Vaccination");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.Travel", b =>
                {
                    b.HasOne("CovidStat.Domain.Entities.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("CovidStat.Domain.Entities.UserProfile", null)
                        .WithMany("Travels")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("ChronicDiseases");

                    b.Navigation("Travels");
                });

            modelBuilder.Entity("CovidStat.Domain.Entities.Vaccination", b =>
                {
                    b.Navigation("SideEffects");
                });
#pragma warning restore 612, 618
        }
    }
}
